{"version":3,"sources":["assets/scripts/Star.js"],"names":["cc","Class","Component","properties","pickRadius","getPlayerDistance","playerPos","game","player","getPosition","dist","node","position","sub","mag","onPicked","spawnNewStar","gainScore","destroy","update","opacityRatio","timer","startDuration","minOpacity","opacity","Math","floor","start"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACRC,IAAAA,UAAU,EAAE;AADJ,GAHP;AAOL;AACAC,EAAAA,iBARK,+BAQe;AAChB,QAAIC,SAAS,GAAG,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,WAAjB,EAAhB;AACA,QAAIC,IAAI,GAAG,KAAKC,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAuBP,SAAvB,EAAkCQ,GAAlC,EAAX;AACA,WAAOJ,IAAP;AACH,GAZI;AAaL;AACAK,EAAAA,QAdK,sBAcK;AACN,SAAKR,IAAL,CAAUS,YAAV;AACA,SAAKT,IAAL,CAAUU,SAAV;AACA,SAAKN,IAAL,CAAUO,OAAV;AACH,GAlBI;AAmBLC,EAAAA,MAnBK,oBAmBG;AACJ,QAAG,KAAKd,iBAAL,KAA2B,KAAKD,UAAnC,EAA8C;AAC1C,WAAKW,QAAL;AACA;AACH;;AACD,QAAIK,YAAY,GAAG,IAAI,KAAKb,IAAL,CAAUc,KAAV,GAAkB,KAAKd,IAAL,CAAUe,aAAnD;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,SAAKZ,IAAL,CAAUa,OAAV,GAAoBD,UAAU,GAAGE,IAAI,CAACC,KAAL,CAAWN,YAAY,IAAI,MAAMG,UAAV,CAAvB,CAAjC;AACH,GA3BI;AA4BLI,EAAAA,KA5BK,mBA4BI,CAER,CA9BI,CAgCL;;AAhCK,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        pickRadius: 0,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n    getPlayerDistance() {\n        let playerPos = this.game.player.getPosition()\n        let dist = this.node.position.sub(playerPos).mag()\n        return dist\n    },\n    // onLoad () {},\n    onPicked(){\n        this.game.spawnNewStar()\n        this.game.gainScore()\n        this.node.destroy()\n    },\n    update(){\n        if(this.getPlayerDistance() < this.pickRadius){\n            this.onPicked()\n            return\n        }\n        let opacityRatio = 1 - this.game.timer / this.game.startDuration\n        let minOpacity = 50\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity))\n    },\n    start () {\n\n    },\n\n    // update (dt) {},\n});\n"]}